---
import { Icon } from "astro-icon/components";

interface Props {
  title: string;
  icon?: string;
  iconClass?: string;
  class?: string;
}

const { title, icon, iconClass = '', class: className = '' } = Astro.props as Props;
const accordionId = `accordion-item-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class={`accordion-item group relative border border-zinc-700/30 bg-zinc-50/30 dark:bg-zinc-900/30 rounded-lg mb-2 last:mb-0 backdrop-blur-sm ${className}`}
>
  <button
    class="accordion-item__button flex w-full items-center justify-between gap-3 px-5 py-4 text-left dark:bg-zinc-900 font-medium text-zinc-800 transition-all duration-200 hover:bg-zinc-100/30 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/60 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent dark:text-zinc-100 dark:hover:bg-zinc-800/30 rounded-lg"
    type="button"
    id={`${accordionId}-button`}
    aria-expanded="false"
    aria-controls={`${accordionId}-content`}
  >
    <div class="flex flex-1 items-center gap-3">
      {icon && (
        <Icon
          name={icon}
          class={`accordion-item__icon h-5 w-5 shrink-0 text-zinc-500 transition-colors duration-200 group-hover:text-zinc-600 dark:text-zinc-400 dark:group-hover:text-zinc-200 ${iconClass}`}
          aria-hidden="true"
        />
      )}
      <span class="text-[15px] font-semibold leading-snug text-zinc-800 transition-colors duration-200 group-hover:text-zinc-900 dark:text-zinc-100 dark:group-hover:text-white">
        {title}
      </span>
    </div>

    <div class="flex items-center justify-center">
      <svg
        class="accordion-item__chevron h-4 w-4 shrink-0 text-zinc-500 transition-transform duration-300 ease-out group-hover:text-zinc-600 dark:text-zinc-400 dark:group-hover:text-zinc-200"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 16 16"
        fill="none"
        stroke="currentColor"
        stroke-width="2.25"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="m4 6l4 4l4-4"></path>
      </svg>
    </div>
  </button>

  <div
    id={`${accordionId}-content`}
    aria-labelledby={`${accordionId}-button`}
    class="accordion-item__content max-h-0 overflow-hidden transition-[max-height] duration-[360ms] ease-out"
  >
    <div class="accordion-item__body translate-y-2 border-t border-zinc-200/30 dark:border-zinc-800/30 px-5 pb-4 pt-3 opacity-0 transition-all duration-[240ms] delay-75">
      <slot />
    </div>
  </div>
</div>

<script>
  function accordionItemSetup() {
    const accordionItems = document.querySelectorAll('.accordion-item') as NodeListOf<HTMLElement>;

    accordionItems.forEach((accordionItem) => {
      const originalButton = accordionItem.querySelector('.accordion-item__button') as HTMLButtonElement;
      const content = accordionItem.querySelector('.accordion-item__content') as HTMLElement;
      const body = accordionItem.querySelector('.accordion-item__body') as HTMLElement;

      if (!originalButton || !content || !body) return;

      const button = originalButton.cloneNode(true) as HTMLButtonElement;
      originalButton.replaceWith(button);

      const chevron = button.querySelector('.accordion-item__chevron') as HTMLElement;
      if (!chevron) return;

      button.addEventListener('click', () => {
        const isActive = accordionItem.classList.contains('active');

        if (!isActive) {
          accordionItem.classList.add('active');
          button.setAttribute('aria-expanded', 'true');
          chevron.classList.add('rotate-180');
          content.style.maxHeight = `${content.scrollHeight}px`;

          requestAnimationFrame(() => {
            body.classList.remove('opacity-0', 'translate-y-2');
            body.classList.add('opacity-100', 'translate-y-0');
          });
        } else {
          accordionItem.classList.remove('active');
          button.setAttribute('aria-expanded', 'false');
          chevron.classList.remove('rotate-180');
          body.classList.remove('opacity-100', 'translate-y-0');
          body.classList.add('opacity-0', 'translate-y-2');

          setTimeout(() => {
            content.style.maxHeight = '0px';
          }, 180);
        }
      });

      button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', accordionItemSetup);
  } else {
    accordionItemSetup();
  }

  document.addEventListener('astro:after-swap', accordionItemSetup);
</script>